(()=>{"use strict";class e{constructor(e){this.value=e,this.next=null}}class t{constructor(){this.head=null,this.tail=null}append(t){const s=new e(t);this.head?(this.tail.next=s,this.tail=s):(this.head=s,this.tail=s)}prepend(t){const s=new e(t);this.head?(s.next=this.head,this.head=s):(this.head=s,this.tail=s)}size(){let e=0,t=this.head;for(;!this.head;)e++,t=t.next;return e}at(e){if(e<0)return null;if(this.head){let t=this.head,s=0;for(;s<e;)s++,t=t.next;return t||null}}pop(){if(!this.tail)return console.log("No item to pop"),null;const e=this.tail.value;if(this.head===this.tail)return this.head=null,this.tail=null,e;let t=this.head;for(;t.next!==this.tail;)t=t.next;return t.next=null,this.tail=t,e}contains(e){let t=this.head;for(;null!==t.next;){if(t.value===e)return!0;t=t.next}return!1}find(e){let t=this.head,s=0;for(;t;){if(t.value===e)return s;t=t.next,s++}return-1}toString(){let e="";if(this.head){let t=this.head;for(;t;){if(null===t.next)return e+"null";e+=`( ${t.value} ) -> `,t=t.next}return e}return null}insertAt(t,s){if(s<0)return null;const n=new e(t);if(0===s)return n.next=this.head,this.head=n,this.tail||(this.tail=n),!0;let l=this.head,h=0;for(;l&&h<s-1;)l=l.next,h++;return!!l&&(n.next=l.next,l.next=n,n.next||(this.tail=n),!0)}removeAt(e){if(e<0||!this.head)return null;if(0===e){const e=this.head.value;return this.head=this.head.next,this.head||(this.tail=null),e}let t=this.head,s=0;for(;t.next&&s<e-1;)t=t.next,s++;if(!t.next)return null;const n=t.next.value;return t.next=t.next.next,t.next||(this.tail=t),n}}class s{constructor(e=8){this.buckets=new Array(e).fill(null).map((()=>new t)),this.size=0,this.loadFactor=.75}hash(e){let t=0;for(let s=0;s<e.length;s++)t=(31*t+e.charCodeAt(s))%this.buckets.length;return t}set(e,t){let s,n=this.hash(e);if(n<0||n>=this.buckets.length)throw new Error("Trying to access index out of bound");s=this.buckets[n];let l=s.head;for(;l;){if(l.value.key===e)return void(l.value.value=t);l=l.next}s.append({key:e,value:t}),this.size++,this.size/this.buckets.length>this.loadFactor&&(this.resize(),console.log("resized hashmap"))}get(e){let t,s=this.hash(e);if(s<0||s>=this.buckets.length)throw new Error("Trying to access index out of bound");t=this.buckets[s];let n=t.head;for(;n;){if(n.value.key===e)return n.value.value;n=n.next}return"Not found"}has(e){let t,s=this.hash(e);if(s<0||s>=this.buckets.length)throw new Error("Trying to access index out of bound");t=this.buckets[s];let n=t.head;for(;n;){if(n.value.key===e)return!0;n=n.next}return!1}remove(e){let t,s=this.hash(e);if(s<0||s>=this.buckets.length)throw new Error("Trying to access index out of bound");t=this.buckets[s];let n=t.head,l=null;for(;n;){if(n.value.key===e)return l?l.next=n.next:t.head=n.next,n===t.tail&&(t.tail=l),this.size--,n.value.value;l=n,n=n.next}return null}length(){return this.size()}clear(){this.buckets=new Array(this.buckets.length).fill(null).map((()=>new t)),this.size=0}keys(){const e=[];for(let t of this.buckets){let s=t.head;for(;s;)e.push(s.value.key),s=s.next}return e}values(){const e=[];for(let t of this.buckets){let s=t.head;for(;s;)e.push(s.value.value),s=s.next}return e}entries(){const e=[];for(let t of this.buckets){let s=t.head;for(;s;){const t=[s.value.key,s.value.value];e.push(t),s=s.next}}return e}resize(){const e=2*this.buckets.length,s=new Array(e).fill(null).map((()=>new t));for(let e of this.buckets){let t=e.head;for(;t;)s[this.hash(t.value.key)].append(t.value),t=t.next}this.buckets=s}}const n=new s;console.log(n.hash("Yorkshire")),console.log(n.hash("Yorkshire")),console.log(n.hash("Center")),console.log(n.hash("center")),console.log(n.hash("CENTER")),n.set("Joe24235","@mogus"),console.log(n.get("Joe24235")),console.log(n.has("Joe24235")),function(){const e=new s;e.set("apple","red"),e.set("banana","yellow"),e.set("carrot","orange"),e.set("dog","brown"),e.set("elephant","gray"),e.set("frog","green"),e.set("frog","blue"),console.log(e.entries())}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,