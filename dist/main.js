(()=>{"use strict";class t{constructor(t){this.value=t,this.next=null}}class e{constructor(){this.head=null,this.tail=null}append(e){const h=new t(e);this.head?(this.tail.next=h,this.tail=h):(this.head=h,this.tail=h)}prepend(e){const h=new t(e);this.head?(h.next=this.head,this.head=h):(this.head=h,this.tail=h)}size(){let t=0,e=this.head;for(;!this.head;)t++,e=e.next;return t}at(t){if(t<0)return null;if(this.head){let e=this.head,h=0;for(;h<t;)h++,e=e.next;return e||null}}pop(){if(!this.tail)return console.log("No item to pop"),null;const t=this.tail.value;if(this.head===this.tail)return this.head=null,this.tail=null,t;let e=this.head;for(;e.next!==this.tail;)e=e.next;return e.next=null,this.tail=e,t}contains(t){let e=this.head;for(;null!==e.next;){if(e.value===t)return!0;e=e.next}return!1}find(t){let e=this.head,h=0;for(;e;){if(e.value===t)return h;e=e.next,h++}return-1}toString(){let t="";if(this.head){let e=this.head;for(;e;){if(null===e.next)return t+"null";t+=`( ${e.value} ) -> `,e=e.next}return t}return null}insertAt(e,h){if(h<0)return null;const s=new t(e);if(0===h)return s.next=this.head,this.head=s,this.tail||(this.tail=s),!0;let n=this.head,i=0;for(;n&&i<h-1;)n=n.next,i++;return!!n&&(s.next=n.next,n.next=s,s.next||(this.tail=s),!0)}removeAt(t){if(t<0||!this.head)return null;if(0===t){const t=this.head.value;return this.head=this.head.next,this.head||(this.tail=null),t}let e=this.head,h=0;for(;e.next&&h<t-1;)e=e.next,h++;if(!e.next)return null;const s=e.next.value;return e.next=e.next.next,e.next||(this.tail=e),s}}const h=new class{constructor(t=8){this.buckets=new Array(t).fill(null).map((()=>new e)),this.size=0,this.loadFactor=.75}hash(t){let e=0;for(let h=0;h<t.length;h++)e=(31*e+t.charCodeAt(h))%this.buckets.length;return e}set(t,e){let h=this.hash(t),s=this.buckets[h];s.head&&s.append({key:t,value:e}),this.size++,this.size/this.buckets.length>this.loadFactor&&this.resize()}get(t){let e=this.hash(t),h=this.buckets[e];return h.head?h.head.key:"Not found"}};console.log(h.hash("Yorkshire")),console.log(h.hash("Yorkshire")),console.log(h.hash("Center")),console.log(h.hash("center")),console.log(h.hash("CENTER")),h.set("Joe24235","@mogus"),console.log(h.get("Joe24235"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,