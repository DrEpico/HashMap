(()=>{"use strict";class t{constructor(t){this.value=t,this.next=null}}class e{constructor(){this.head=null,this.tail=null}append(e){const n=new t(e);this.head?(this.tail.next=n,this.tail=n):(this.head=n,this.tail=n)}prepend(e){const n=new t(e);this.head?(n.next=this.head,this.head=n):(this.head=n,this.tail=n)}size(){let t=0,e=this.head;for(;!this.head;)t++,e=e.next;return t}head(){return this.head?this.head:null}tail(){return this.tail?this.tail:null}at(t){if(t<0)return null;if(this.head){let e=this.head,n=0;for(;n<t;)n++,e=e.next;return e||null}}pop(){if(!this.tail)return console.log("No item to pop"),null;const t=this.tail.value;if(this.head===this.tail)return this.head=null,this.tail=null,t;let e=this.head;for(;e.next!==this.tail;)e=e.next;return e.next=null,this.tail=e,t}contains(t){let e=this.head;for(;null!==e.next;){if(e.value===t)return!0;e=e.next}return!1}find(t){let e=this.head,n=0;for(;e;){if(e.value===t)return n;e=e.next,n++}return-1}toString(){let t="";if(this.head){let e=this.head;for(;e;){if(null===e.next)return t+"null";t+=`( ${e.value} ) -> `,e=e.next}return t}return null}insertAt(e,n){if(n<0)return null;const i=new t(e);if(0===n)return i.next=this.head,this.head=i,this.tail||(this.tail=i),!0;let h=this.head,l=0;for(;h&&l<n-1;)h=h.next,l++;return!!h&&(i.next=h.next,h.next=i,i.next||(this.tail=i),!0)}removeAt(t){if(t<0||!this.head)return null;if(0===t){const t=this.head.value;return this.head=this.head.next,this.head||(this.tail=null),t}let e=this.head,n=0;for(;e.next&&n<t-1;)e=e.next,n++;if(!e.next)return null;const i=e.next.value;return e.next=e.next.next,e.next||(this.tail=e),i}}const n=new class{constructor(t=8){this.buckets=new Array(t).fill(null).map((()=>new e)),this.size=0,this.loadFactor=.75}hash(t){let e=0;for(let n=0;n<t.length;n++)e=(31*e+t.charCodeAt(n))%this.buckets.length;return e}set(t,e){}};console.log(n.hash("Yorkshire"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,